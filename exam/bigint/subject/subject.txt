Exam — C++ Arbitrary Precision Unsigned Integer

Duration: 2 hours
Standard: C++98
Allowed: Standard C++ library only (no external libraries).
Prohibited: Built-in 64-bit or larger integer types (long long, etc.) for storing the number directly.
Description

You must implement a class BigInt to represent an arbitrary precision unsigned integer (positive integers of any length).

Internally, you may store the number as you wish (std::string, array of digits, etc.).
Your class must support arithmetic and a special type of “digit shifting” as described below.

int main() {
    // ===== Constructor Tests =====
    BigInt empty;
    BigInt fromInt(12345);
    BigInt fromString("987654");
    BigInt copy(fromInt);

    std::cout << "empty = " << empty << std::endl;
    std::cout << "fromInt = " << fromInt << std::endl;
    std::cout << "fromString = " << fromString << std::endl;
    std::cout << "copy(fromInt) = " << copy << std::endl;

    BigInt a("4257");
    BigInt b(42);

    std::cout << "\n-- Addition --\n";
    std::cout << "a + b = " << a + b << std::endl;
    std::cout << "a + 42 = " << a + 42 << std::endl;

    std::cout << "\n-- Subtraction --\n";
    std::cout << "fromString - fromInt = " << fromString - fromInt << std::endl;
    std::cout << "fromInt - b = " << fromInt - b << std::endl;

    std::cout << "\n-- Multiplication --\n";
    std::cout << "b * 100 = " << b * BigInt(100) << std::endl;
    std::cout << "a * b = " << a * b << std::endl;

    std::cout << "\n-- Digit Shifting --\n";
    std::cout << "b << 4 = " << (b << 4) << std::endl;
    std::cout << "fromInt >> 2 = " << (fromInt >> 2) << std::endl;

    BigInt shiftTest("123456");
    shiftTest <<= 3;
    std::cout << "shiftTest <<= 3 -> " << shiftTest << std::endl;
    shiftTest >>= 4;
    std::cout << "shiftTest >>= 4 -> " << shiftTest << std::endl;

    std::cout << "\n-- Complex Expressions --\n";
    std::cout << "((a + b) <<= 3) + 42 = "
              << ((a + b) <<= 3) + 42 << std::endl;

    BigInt chain("999");
    std::cout << "((chain * 2) >> 1) + (b << 2) = "
              << ((chain * BigInt(2)) >> 1) + (b << 2) << std::endl;

    std::cout << "\n-- Stress Test (Large Numbers) --\n";
    BigInt big1("999999999999999999999999999999999999999999");
    BigInt big2("888888888888888888888888888888888888888888");

    std::cout << "big1 + big2 = " << big1 + big2 << std::endl;
    std::cout << "big1 * 42 = " << big1 * BigInt(42) << std::endl;

    BigInt bigShift("123456789");
    bigShift <<= 15;
    std::cout << "bigShift <<= 15 = " << bigShift << std::endl;
    bigShift >>= 10;
    std::cout << "bigShift >>= 10 = " << bigShift << std::endl;

    BigInt giantSum = ((big1 + big2) * BigInt(123456789)) << 5;
    std::cout << "((big1 + big2) * 123456789) << 5 = " << giantSum << std::endl;

    return 0;
}

Deliverables

    BigInt.hpp — class declaration.

    BigInt.cpp — class implementation.

Your code will be compiled with:

c++ -Wall -Wextra -Werror -std=c++98 main.cpp Bigint.cpp -o Bigint

It must compile without warnings or errors and produce correct output.
