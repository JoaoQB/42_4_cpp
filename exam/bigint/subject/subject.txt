Exam — C++ Arbitrary Precision Unsigned Integer

Duration: 2 hours
Standard: C++98
Allowed: Standard C++ library only (no external libraries).
Prohibited: Built-in 64-bit or larger integer types (long long, etc.) for storing the number directly.
Description

You must implement a class BigInt to represent an arbitrary precision unsigned integer (positive integers of any length).

Internally, you may store the number as you wish (std::string, array of digits, etc.).
Your class must support arithmetic and a special type of “digit shifting” as described below.

int main() {
    // ===== Constructor Tests =====
    BigInt empty;
    BigInt fromInt(12345);
    BigInt fromString("987654");
    BigInt copy(fromInt);

    std::cout << "empty = " << empty << std::endl;
    std::cout << "fromInt = " << fromInt << std::endl;
    std::cout << "fromString = " << fromString << std::endl;
    std::cout << "copy(fromInt) = " << copy << std::endl;

    BigInt a("4257");
    BigInt b(42);

    // ===== Addition =====
    std::cout << "\n-- Addition --\n";
    std::cout << "a + b = " << a + b << std::endl;
    std::cout << "a + 42 = " << a + 42 << std::endl;

    // ===== Digit Shifting =====
    std::cout << "\n-- Digit Shifting --\n";
    std::cout << "b << 4 = " << (b << 4) << std::endl;
    std::cout << "fromInt >> 2 = " << (fromInt >> 2) << std::endl;

    BigInt shiftTest("123456");
    shiftTest <<= 3;
    std::cout << "shiftTest <<= 3 -> " << shiftTest << std::endl;
    shiftTest >>= 4;
    std::cout << "shiftTest >>= 4 -> " << shiftTest << std::endl;

    // Test with BigInt as shift amount
    BigInt shiftVal(2);
    a >>= shiftVal;
    std::cout << "a >>= (const BigInt)2 -> " << a << std::endl;

    // ===== Comparisons =====
    std::cout << "\n-- Comparisons --\n";
    std::cout << "fromInt == copy: " << (fromInt == copy) << std::endl;
    std::cout << "fromInt != b: " << (fromInt != b) << std::endl;
    std::cout << "fromInt > b: " << (fromInt > b) << std::endl;
    std::cout << "fromInt < fromString: " << (fromInt < fromString) << std::endl;
    std::cout << "fromInt <= copy: " << (fromInt <= copy) << std::endl;
    std::cout << "fromInt >= copy: " << (fromInt >= copy) << std::endl;

    // ===== Complex Expression =====
    std::cout << "\n-- Complex Expressions --\n";
    std::cout << "((a + b) << 3) + 42 = " << ((a + b) << 3) + 42 << std::endl;

    return 0;
}

Deliverables

    BigInt.hpp — class declaration.

    BigInt.cpp — class implementation.

Your code will be compiled with:

c++ -Wall -Wextra -Werror -std=c++98 main.cpp Bigint.cpp -o Bigint

It must compile without warnings or errors and produce correct output.
